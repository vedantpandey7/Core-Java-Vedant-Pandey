Question: 
Explain the difference between method overloading and method overriding in Java. Provide code example
Solution: 

Method overloading : 
1. it  is a compile-time polymorphism.
2.Method overloading helps to increase the readability of the program.
3.It occurs within the class.
4.Method overloading may or may not require inheritance.
5.in method overloading, methods must have the same name and different signatures.
6.In method overloading, the return type can or can not be the same, but we just have to change the parameter.
7. Static binding is being used for overloaded methods.
8.Private and final methods can be overloaded.

Method overriding: 
1.Method overriding is a run-time polymorphism.
2.Method overriding is used to grant the specific implementation of the method which is already provided by its parent class or superclass.
3.It is performed in two classes with inheritance relationships.
4.Method overriding always needs inheritance.
5.In method overriding, methods must have the same name and same signature.
6.In method overriding, the return type must be the same or co-variant.
7.Dynamic binding is being used for overriding methods.
8.Private and final methods canâ€™t be overridden.


Example: 

method overloading:               

import java.io.*;

class MethodOverloadingEx {

    static int add(int a, int b) { 
        return a + b; 
        }

    static int add(int a, int b, int c)
    {
        return a + b + c;
    }

  
    public static void main(String args[])
    {
        System.out.println("add() with 2 parameters");
        System.out.println(add(4, 6));

        System.out.println("add() with 3 parameters");
        System.out.println(add(4, 6, 7));
    }
}



method overriding: 

import java.io.*;

class Animal {
    void eat() {
        System.out.println("eat() method of base class");
        System.out.println("Animal is eating.");
    }
}


class Dog extends Animal {
    @Override
    void eat() {
        System.out.println("eat() method of derived class");
        System.out.println("Dog is eating.");
    }

    void eatAsAnimal() {
        super.eat();
    }
}

class MethodOverridingEx {

    public static void main(String args[]) {
        Dog d1 = new Dog();
        Animal a1 = new Animal();

        // Calls the eat() method of Dog class
        d1.eat();
        // Calls the eat() method of Animal class
        a1.eat();

        // Polymorphism: Animal reference pointing to Dog object
        Animal animal = new Dog();
        
        // Calls the eat() method of Dog class
        animal.eat();
        
        // To call the base class method, you need to use a Dog reference
        ((Dog) animal).eatAsAnimal();
    }
}